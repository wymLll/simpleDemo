/**
 * 基本类型按值传递
 * 对象类型按共享传递
 * 
 * 共享传递：调用函数传参时，函数接收对象实参的引用副本（既不是按值传递，也不是按引用传递）
 * 他和按引用传递的不同在于：在共享传递中对函数形参赋值，不会影响实参的值
 * 虽然是引用的副本，引用的对象是相同，他们共享相同的对象
 * JS 中把这种拷贝也认为是按值传递。
 * 
 * JS 中把这种拷贝也认为是按值传递。
 * 我的理解：形参拷贝实参对应的内存数据，此时基本类型即为实参的值，而对象被拷贝的其实是内存地址
 */
let a = 1;
let obj1 = {x: 1};
let obj2 = {y: 1};
let arr = [];
function foo(a, obj1, obj2, arr){
    a = 2;
    obj1.x = 2;
    obj2 = 2;
    arr.push(1);
}
foo(a, obj1, obj2, arr);
console.log(a) //1
console.log(arr) //[1]
console.log(obj1) //{ x: 2 }
console.log(obj2) //{ y: 1 }